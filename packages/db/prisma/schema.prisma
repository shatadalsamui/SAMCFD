// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  password  String
  verified  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  balance   Balance?
  Trade     Trade[]
  Holdings  Holdings[]
}

model Balance {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  amount Int //store in paisa ,cents the lowest possible unit 
}

enum Side {
  BUY
  SELL
}

enum OrderType {
  MARKET
  LIMIT
}

enum TradeTerm {
  INTRAHOUR
  INTRADAY
  WEEK
  MONTH
  YEAR
}

enum TimeInForce {
  IOC
  FOK
  DAY
  GTC
  EXPIRE_AT
}

enum TradeStatus {
  OPEN
  MATCHED
  FILLED
  CLOSED
  LIQUIDATED
  CANCELLED
}

model Trade {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  asset  String // e.g., "BTC"

  // replaced "type" string with enum Side
  side Side

  // collateral / execution
  margin   Int // stored in smallest unit (cents)
  leverage Int
  slippage Int
  quantity Int?

  // price fields (smallest unit)
  entryPrice Int? // set when trade is filled/opened
  closePrice Int? // set when closed
  pnl        Int? // realized PnL in smallest unit

  // order semantics
  orderType   OrderType    @default(MARKET)
  limitPrice  Int? // for LIMIT orders (smallest unit)
  tradeTerm   TradeTerm?
  timeInForce TimeInForce?
  expiryAt    DateTime? // expiry timestamp

  // stop/take specification (percent) and computed prices (smallest unit)
  stopLossPercent   Float?
  takeProfitPercent Float?
  stopLossPrice     Int?
  takeProfitPrice   Int?

  status TradeStatus @default(OPEN)

  createdAt DateTime  @default(now())
  closedAt  DateTime?

  @@index([userId])
  @@index([asset, status])
}

model Holdings {
  id       String  @id @default(uuid())
  userId   String
  asset    String
  quantity Decimal // or Int in smallest unit
  user     User    @relation(fields: [userId], references: [id])

  @@unique([userId, asset])
  @@index([userId])
}
